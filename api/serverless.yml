service: serverless-invoice-api
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: us-west-1
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'dynamodb:*'
      Resource:
        - 'arn:aws:dynamodb:*:*'
  environment:
    APP_SECRET: ${file(./config.yml):${self:custom.stage}.APP_SECRET}
    DB_PREFIX: ${file(./config.yml):${self:custom.stage}.DB_PREFIX}

plugins:
  - serverless-dynamodb-local
  - serverless-offline

custom:
  stage: ${opt:stage, self:provider.stage}
  DB_PREFIX: ${file(./config.yml):${self:custom.stage}.DB_PREFIX}
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed:
      domain:
        sources:
          - table: ${self:custom.DB_PREFIX}-invoices
            sources: [./offline/migrations/invoice-seed.json]

functions:
  getAllInvoices:
    handler: handler.getAllInvoices
    events:
      - http:
          method: GET
          path: invoices/getAll
          cors: true

  createInvoice:
    handler: handler.createInvoice
    events:
      - http:
          method: POST
          path: invoices
          cors: true

  updateInvoice:
    handler: handler.updateInvoice
    events:
      - http:
          method: PUT
          path: invoices/update
          cors: true

  updateInvoiceStatus:
    handler: handler.updateInvoiceStatus
    events:
      - http:
          method: PUT
          path: invoices/status
          cors: true

  deleteInvoice:
    handler: handler.deleteInvoice
    events:
      - http:
          method: DELETE
          path: invoices/delete/{id}
          cors: true

resources:
  Resources: ${file(offline/migrations/invoice.yml)}

package:
  exclude:
    - node_modules/dynamodb-localhost/**
    - node_modules/serverless-dynamodb-local/**
    - node_modules/serverless-offline/**
